"""empty message

Revision ID: 407f27f5c6e
Revises: None
Create Date: 2016-02-21 17:57:26.103593

"""

# revision identifiers, used by Alembic.
revision = '407f27f5c6e'
down_revision = None

from alembic import op
import sqlalchemy as sa


import easybiodata.utils.citext

def upgrade():
    ### commands auto generated by Alembic - please adjust! ###
    op.create_table('contacts',
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('deleted_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('id', easybiodata.utils.citext.CIText(), nullable=False),
    sa.Column('creator_id', easybiodata.utils.citext.CIText(), nullable=True),
    sa.Column('name', easybiodata.utils.citext.CIText(), nullable=True),
    sa.Column('phone', sa.TEXT(), nullable=True),
    sa.Column('email', easybiodata.utils.citext.CIText(), nullable=True),
    sa.Column('website', sa.TEXT(), nullable=True),
    sa.Column('address_line1', sa.TEXT(), nullable=True),
    sa.Column('address_line2', sa.TEXT(), nullable=True),
    sa.Column('city', sa.TEXT(), nullable=True),
    sa.Column('region', sa.TEXT(), nullable=True),
    sa.Column('postal_code', sa.TEXT(), nullable=True),
    sa.Column('country', sa.TEXT(), nullable=True),
    sa.Column('google_place_id', sa.TEXT(), nullable=True),
    sa.Column('latitude', sa.FLOAT(), nullable=True),
    sa.Column('longitude', sa.FLOAT(), nullable=True),
    sa.Column('timezone', sa.TEXT(), nullable=True),
    sa.Column('notes', sa.TEXT(), nullable=True),
    sa.Column('parent_company_id', easybiodata.utils.citext.CIText(), nullable=True),
    sa.CheckConstraint('(google_place_id IS NULL AND latitude is NULL) OR (google_place_id IS NOT NULL AND latitude is NOT NULL)', name='place_id_coordinate'),
    sa.CheckConstraint('(latitude IS NULL AND longitude IS NULL) OR (latitude IS NOT NULL AND longitude IS NOT NULL)', name='lat_lon'),
    sa.CheckConstraint('LENGTH(address_line1) BETWEEN 1 AND 100', name='address_line1_length'),
    sa.CheckConstraint('LENGTH(address_line2) BETWEEN 1 AND 100', name='address_line2_length'),
    sa.CheckConstraint('LENGTH(city) BETWEEN 1 AND 100', name='city_length'),
    sa.CheckConstraint('LENGTH(country) BETWEEN 1 AND 100', name='country_length'),
    sa.CheckConstraint('LENGTH(email) BETWEEN 1 AND 100', name='email_length'),
    sa.CheckConstraint('LENGTH(id) BETWEEN 1 AND 100', name='id_length'),
    sa.CheckConstraint('LENGTH(name) BETWEEN 1 AND 100', name='name_length'),
    sa.CheckConstraint('LENGTH(notes) BETWEEN 1 AND 1000', name='notes_length'),
    sa.CheckConstraint('LENGTH(phone) BETWEEN 1 AND 100', name='phone_length'),
    sa.CheckConstraint('LENGTH(postal_code) BETWEEN 1 AND 100', name='postal_code_length'),
    sa.CheckConstraint('LENGTH(region) BETWEEN 1 AND 100', name='region_length'),
    sa.CheckConstraint('LENGTH(timezone) BETWEEN 1 AND 100', name='timezone_length'),
    sa.CheckConstraint('LENGTH(website) BETWEEN 1 AND 100', name='website_length'),
    sa.ForeignKeyConstraint(['creator_id'], ['contacts.id'], ),
    sa.ForeignKeyConstraint(['parent_company_id'], ['contacts.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_contacts_created_at'), 'contacts', ['created_at'], unique=False)
    op.create_index(op.f('ix_contacts_deleted_at'), 'contacts', ['deleted_at'], unique=False)
    op.create_index(op.f('ix_contacts_updated_at'), 'contacts', ['updated_at'], unique=False)
    op.create_table('profiles',
    sa.Column('id', easybiodata.utils.citext.CIText(), nullable=False),
    sa.Column('owner_id', sa.INTEGER(), nullable=True),
    sa.Column('relation_with_owner_id', sa.INTEGER(), nullable=True),
    sa.Column('religion_id', sa.INTEGER(), nullable=True),
    sa.Column('gothra', easybiodata.utils.citext.CIText(), nullable=True),
    sa.Column('caste', easybiodata.utils.citext.CIText(), nullable=True),
    sa.Column('birth_city', easybiodata.utils.citext.CIText(), nullable=True),
    sa.Column('height', sa.INTEGER(), nullable=True),
    sa.Column('complexion', easybiodata.utils.citext.CIText(), nullable=True),
    sa.Column('description', easybiodata.utils.citext.CIText(), nullable=True),
    sa.Column('residence_country', easybiodata.utils.citext.CIText(), nullable=True),
    sa.Column('residence_city', easybiodata.utils.citext.CIText(), nullable=True),
    sa.Column('contact_email', easybiodata.utils.citext.CIText(), nullable=True),
    sa.Column('education_level_id', sa.INTEGER(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.Column('birth_datetime', sa.DateTime(), nullable=True),
    sa.Column('template_id', sa.INTEGER(), nullable=True),
    sa.Column('is_active', sa.BOOLEAN(), nullable=True),
    sa.Column('gender', easybiodata.utils.citext.CIText(), nullable=True),
    sa.Column('first_name', easybiodata.utils.citext.CIText(), nullable=True),
    sa.Column('last_name', easybiodata.utils.citext.CIText(), nullable=True),
    sa.Column('birth_country', easybiodata.utils.citext.CIText(), nullable=True),
    sa.Column('residence_state', easybiodata.utils.citext.CIText(), nullable=True),
    sa.Column('pdf_generated_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('pdf_path', easybiodata.utils.citext.CIText(), nullable=True),
    sa.Column('matching_opt_in', sa.BOOLEAN(), nullable=True),
    sa.Column('additional_information', easybiodata.utils.citext.CIText(), nullable=True),
    sa.Column('annual_income', easybiodata.utils.citext.CIText(), nullable=True),
    sa.Column('own_house', easybiodata.utils.citext.CIText(), nullable=True),
    sa.Column('own_car', easybiodata.utils.citext.CIText(), nullable=True),
    sa.Column('drink', easybiodata.utils.citext.CIText(), nullable=True),
    sa.Column('smoke', easybiodata.utils.citext.CIText(), nullable=True),
    sa.Column('blood_type', easybiodata.utils.citext.CIText(), nullable=True),
    sa.Column('diet', easybiodata.utils.citext.CIText(), nullable=True),
    sa.Column('family_values', easybiodata.utils.citext.CIText(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('files',
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('deleted_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('id', easybiodata.utils.citext.CIText(), nullable=False),
    sa.Column('creator_id', easybiodata.utils.citext.CIText(), nullable=False),
    sa.Column('notes', sa.TEXT(), nullable=True),
    sa.Column('bucket_name', sa.TEXT(), nullable=False),
    sa.Column('key', sa.TEXT(), nullable=False),
    sa.Column('size_bytes', sa.INTEGER(), nullable=False),
    sa.CheckConstraint('LENGTH(bucket_name) BETWEEN 3 AND 63', name='bucket_name_length'),
    sa.CheckConstraint('LENGTH(key) BETWEEN 1 AND 1024', name='key_length'),
    sa.CheckConstraint('LENGTH(notes) BETWEEN 1 AND 1000', name='notes_length'),
    sa.CheckConstraint('size_bytes >= 0', name='size_bytes_nonnegative'),
    sa.ForeignKeyConstraint(['creator_id'], ['contacts.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_files_created_at'), 'files', ['created_at'], unique=False)
    op.create_index(op.f('ix_files_deleted_at'), 'files', ['deleted_at'], unique=False)
    op.create_index(op.f('ix_files_updated_at'), 'files', ['updated_at'], unique=False)
    op.create_table('matching_log',
    sa.Column('id', easybiodata.utils.citext.CIText(), nullable=False),
    sa.Column('male_user_id', easybiodata.utils.citext.CIText(), nullable=False),
    sa.Column('female_user_id', easybiodata.utils.citext.CIText(), nullable=False),
    sa.Column('match_sent', sa.DateTime(timezone=True), nullable=True),
    sa.Column('male_response', easybiodata.utils.citext.CIText(), nullable=True),
    sa.Column('female_response', easybiodata.utils.citext.CIText(), nullable=True),
    sa.ForeignKeyConstraint(['female_user_id'], ['profiles.id'], ),
    sa.ForeignKeyConstraint(['male_user_id'], ['profiles.id'], ),
    sa.PrimaryKeyConstraint('id', 'male_user_id', 'female_user_id')
    )
    op.create_table('profile_pictures',
    sa.Column('deleted_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('id', easybiodata.utils.citext.CIText(), nullable=False),
    sa.Column('profile_id', easybiodata.utils.citext.CIText(), nullable=False),
    sa.Column('picture', sa.TEXT(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['profile_id'], ['profiles.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_profile_pictures_deleted_at'), 'profile_pictures', ['deleted_at'], unique=False)
    ### end Alembic commands ###


def downgrade():
    ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_profile_pictures_deleted_at'), table_name='profile_pictures')
    op.drop_table('profile_pictures')
    op.drop_table('matching_log')
    op.drop_index(op.f('ix_files_updated_at'), table_name='files')
    op.drop_index(op.f('ix_files_deleted_at'), table_name='files')
    op.drop_index(op.f('ix_files_created_at'), table_name='files')
    op.drop_table('files')
    op.drop_table('profiles')
    op.drop_index(op.f('ix_contacts_updated_at'), table_name='contacts')
    op.drop_index(op.f('ix_contacts_deleted_at'), table_name='contacts')
    op.drop_index(op.f('ix_contacts_created_at'), table_name='contacts')
    op.drop_table('contacts')
    ### end Alembic commands ###
